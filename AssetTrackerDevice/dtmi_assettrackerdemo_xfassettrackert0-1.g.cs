// <auto-generated />

using MQTTnet.Client;
using Rido.IoTClient;
using Rido.IoTClient.AzIoTHub;
using Rido.IoTClient.AzIoTHub.TopicBindings;
using System.Reflection.Metadata;

namespace dtmi_assettrackerdemo
{
    public class xfassettrackert0 : IoTHubPnPClient
    {
        const string modelId = "dtmi:assetTrackerDemo:XFAssetTrackert0;1";

        public Telemetry<Location> Telemetry_Location;
        public WritableProperty<int> Property_Interval;
        public Command<EmptyCommandRequest, EmptyCommandResponse> Command_Reboot;
        public ReadOnlyProperty<string> Property_FrameworkVersion;
        public ReadOnlyProperty<string> Property_SDKVersion;
        public ReadOnlyProperty<string> Property_Manufacturer;

        public xfassettrackert0(IMqttClient c) : base(c)
        {
            Property_Interval = new WritableProperty<int>(c, "Interval");
            Telemetry_Location = new Telemetry<Location>(c, "Location");
            Command_Reboot = new Command<EmptyCommandRequest, EmptyCommandResponse>(c, "Reboot");
            Property_FrameworkVersion = new ReadOnlyProperty<string>(c, "FrameworkVersion");
            Property_SDKVersion = new ReadOnlyProperty<string>(c, "SDKVersion");
            Property_Manufacturer = new ReadOnlyProperty<string>(c, "Manufacturer");
        }

        public static async Task<xfassettrackert0> CreateAsync(string connectionString, CancellationToken cancellationToken)
        {
            var cs = new ConnectionSettings(connectionString) { ModelId = modelId };
            var client = new xfassettrackert0(await IoTHubConnectionFactory.CreateAsync(cs, cancellationToken)) { ConnectionSettings = cs };
            client.InitialState = await client.GetTwinAsync(cancellationToken);
            return client;
        }

        public Dictionary<string, object> AllReadOnlyProperties => new Dictionary<string, object>()
        {
            { Property_FrameworkVersion.Name, Property_FrameworkVersion.PropertyValue },
            { Property_SDKVersion.Name, Property_SDKVersion.PropertyValue },
            { Property_Manufacturer.Name, Property_Manufacturer.PropertyValue }
        };


    }

    public struct Location
    {
        public double lat { get; set; }
        public double lon { get; set; }
        public double alt { get; set; }
    }
}
